# Based on https://gist.github.com/joegasper/93ff8ae44fa8712747d85aa92c2b4c78
# allows an additional level of ips
# Get-PingSweep -SubNet '10.1'
# Get-PingSweep -SubNet '10.24'
function ResolveIp($IpAddress) {
    try {
        (Resolve-DnsName $IpAddress -QuickTimeout -ErrorAction SilentlyContinue).NameHost
    } catch {
        $null
    }
}

function Get-PingSweep {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$true)]
        [string]$SubNet,
        [switch]$ResolveName
    )
    $ips = 0..254 | ForEach-Object {"$($SubNet).$_"}
    $iprange = 1..254
    $ps = foreach ($i in $ips)
    { 
        foreach ($x in $iprange){
            $ip = $i + "." + $x
            (New-Object Net.NetworkInformation.Ping).SendPingAsync($ip, 250)
        }
    }

    [Threading.Tasks.Task]::WaitAll($ps)
    $ps.Result | Where-Object -FilterScript {$_.Status -eq 'Success' -and $_.Address -like "$subnet*"} |
    Select-Object Address,Status,RoundtripTime -Unique |
    ForEach-Object {
        if ($_.Status -eq 'Success') {
            if (!$ResolveName) {
                $_
            } else {
                $_ | Select-Object Address, @{Expression={ResolveIp($_.Address)};Label='Name'}, Status, RoundtripTime
            }
        }
    }
}
