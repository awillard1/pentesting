import boto3
import subprocess
import argparse
import sys
from botocore.exceptions import ClientError

###################################################################################################
#  Required: In the linux terminal calling this script, the access keys need to be provided before running the script.
###################################################################################################

# List of regions
# REGION could be populated from an authenticated query such as:
# aws ec2 describe-regions --all-regions --query "Regions[].{Name:RegionName}" --output text --filters "Name=endpoint,Values=*us*"

REGIONS = ["us-east-1", "us-west-1"]

# Function to check if an instance is online
def check_instance_status(instance_id, region):
    ec2_client = boto3.client('ec2', region_name=region)
    try:
        response = ec2_client.describe_instance_status(InstanceIds=[instance_id])
        if response['InstanceStatuses']:
            instance_status = response['InstanceStatuses'][0]['InstanceState']['Name']
            return instance_status == "running"
        return False
    except ClientError as e:
        print(f"Error checking instance status: {e}")
        return None

# Retrieve instances and IPs
def get_instance_info(region):
    ec2_client = boto3.client('ec2', region_name=region)
    response = ec2_client.describe_instances(
        Filters=[{'Name': 'instance-state-name', 'Values': ['running']}]
    )
    instances = []
    for reservation in response['Reservations']:
        for instance in reservation['Instances']:
            instance_id = instance['InstanceId']
            private_ip = instance.get('PrivateIpAddress', 'N/A')
            instances.append((instance_id, private_ip))
    return instances

def display_instance_list(instance_map):
    for index, (instance_id, private_ip) in instance_map.items():
        print(f"{index}: {instance_id} : {private_ip}")

def main():
    # Argument parser setup
    parser = argparse.ArgumentParser(description="Connect to AWS EC2 instances via SSM.")
    parser.add_argument(
        "--region", 
        choices=REGIONS, 
        help="AWS region to use. If not provided, you will be prompted to select one."
    )
    parser.add_argument(
        "--instanceid",
        help="ID of the EC2 instance to connect to. If provided, --region must also be specified."
    )
    
    args = parser.parse_args()

    if args.instanceid and not args.region:
        print("Error: --region must be specified if --instanceid is provided.")
        sys.exit(1)

    if args.region:
        selected_region = args.region
    else:
        # Prompt user to select a region
        print("Select a region:")
        for i, region in enumerate(REGIONS):
            print(f"{i}: {region}")
        
        selected_region_index = input("Enter the index number of the region: ")
        
        if not selected_region_index.isdigit() or int(selected_region_index) < 0 or int(selected_region_index) >= len(REGIONS):
            print("Invalid region index. Exiting...")
            return
        
        selected_region = REGIONS[int(selected_region_index)]
    
    print(f"Selected region: {selected_region}")

    if args.instanceid:
        selected_instance = args.instanceid
        
        instance_status = check_instance_status(selected_instance, selected_region)
        if instance_status is None:
            print(f"Invalid instance ID: {selected_instance}")
            load_instances = input("\nWould you like to load the list of instances? (yes/no): ").strip().lower()
            if load_instances != 'yes':
                print("Exiting...")
                return
        elif instance_status:
            print(f"Connecting to the specified instance ({selected_instance})...")
            try:
                subprocess.run(["aws", "ssm", "start-session", "--region", selected_region, "--target", selected_instance], check=True)
                print("Session ended.")
            except subprocess.CalledProcessError:
                print("Failed to start session with the specified instance.")
            return

    instance_list = get_instance_info(selected_region)
    instance_map = {i: instance for i, instance in enumerate(instance_list)}

    if not instance_map:
        print("No running instances found.")
        return

    display_instance_list(instance_map)

    try:
        while True:
            print()
            selected_index = input("Select EC2 Instance (Enter the index number): ")
            
            if not selected_index.isdigit() or int(selected_index) < 0 or int(selected_index) >= len(instance_map):
                print("Invalid input. Please enter a valid index number.")
                continue
            
            selected_index = int(selected_index)
            selected_instance = instance_map[selected_index][0]
            
            if check_instance_status(selected_instance, selected_region):
                print(f"Connecting to the selected instance ({selected_instance})...")
                try:
                    subprocess.run(["aws", "ssm", "start-session", "--region", selected_region, "--target", selected_instance], check=True)
                    print("Session ended.")
                    
                    another_instance = input("Do you want to connect to another instance? (yes/no): ").strip().lower()
                    if another_instance != 'yes':
                        break
                    else:
                        display_instance_list(instance_map)
                except subprocess.CalledProcessError:
                    print("Failed to start session with the selected instance. Please select another instance.")
            else:
                print(f"The selected instance ({selected_instance}) is not running or accessible. Please select another instance.")
    except KeyboardInterrupt:
        print("\nScript terminated by user. Exiting...")

if __name__ == "__main__":
    main()
